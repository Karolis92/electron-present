import { app, BrowserWindow, desktopCapturer, ipcMain, Menu, screen } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const PRESENTATION_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.on("close", closePresentationWindow)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

let presentatioWindow: BrowserWindow;
const present = async () => {
  if (presentatioWindow && !presentatioWindow.isDestroyed()) {
    return;
  }
  const inputSources = await desktopCapturer.getSources({ types: ['screen'] });

  const videoOptionsMenu = Menu.buildFromTemplate(
    inputSources.map(source => {
      return {
        label: source.name,
        icon: source.thumbnail,
        click: () => {
          const selected = screen.getAllDisplays().find((s) => `${s.id}` === source.display_id);
          presentatioWindow = new BrowserWindow({
            x: selected.bounds.x + 50,
            y: selected.bounds.y + 50,
            fullscreen: true,
            skipTaskbar: true,
            autoHideMenuBar: true,
          })
          presentatioWindow.loadURL(PRESENTATION_WINDOW_WEBPACK_ENTRY);
        }
      };
    })
  );

  videoOptionsMenu.popup();
}

const closePresentationWindow = () => {
  presentatioWindow && !presentatioWindow.isDestroyed() && presentatioWindow.close()
};

Menu.setApplicationMenu(Menu.buildFromTemplate(
  [
    {
      label: "Stop Presenting",
      accelerator: "Esc",
      click: closePresentationWindow
    }
  ]
));

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.handle('present', present);
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
